// Usage: node scripts/save.js "Title of the problem"
// OR: npm run save "Title of the problem"
import { readFile, writeFile, readdir } from 'node:fs/promises'

const l = (...args) => console.log('[save]', ...args, '...')

const title = process.argv[2]
if (!title || !title.trim()) {
  console.error('Please provide a title')
  process.exit(1)
}

l(`Saving docs for ${title}`)

const slug = title.toLowerCase().replace(/\s/g, '-');
console.log(slug)

l('Reading files')

const mainCpp = await readFile('src/main.cpp', 'utf8')
const input = await readFile('src/in', 'utf8')
const output = await readFile('src/out', 'utf8')

// extract the headers
const HEADER_START = '//--- headers'
const HEADER_END = '//--- end headers'
const start = mainCpp.indexOf(HEADER_START) + HEADER_START.length
const end = mainCpp.indexOf(HEADER_END)
const headersSlice = mainCpp.slice(start, end).trim()
// console.log(headersSlice)

// extract the functions
const FUNCTION_START = 'using namespace std;'
const FUNCTION_END = 'int solve()'
const funcStart = mainCpp.indexOf(FUNCTION_START) + FUNCTION_START.length
const funcEnd = mainCpp.indexOf(FUNCTION_END)
const functionsSlice = mainCpp.slice(funcStart, funcEnd).trim()
// console.log(functionsSlice)

const TEMPLATE = `## ${title}
code
\`\`\`cpp
${headersSlice}

${functionsSlice}
\`\`\`
input
\`\`\`
${input}
\`\`\`
output
\`\`\`
${output}
\`\`\`
`
l('Checking if the doc already exists')

const docs = await readdir('docs')
const regex = new RegExp(`.*-${slug}\\.md$`);
let key = `${docs.length.toString().padStart(2, '0')}-${slug}.md`

// already exists
docs.some(doc => {
  if (regex.test(doc)) {
    l(`Doc: ${doc} already exists`);
    key = doc
    return true
  }
  return false
})

l('Writing the doc')

await writeFile(`docs/${key}`, TEMPLATE, {
  encoding: 'utf8',
  flag: 'w'
})

function renderIndex(indexObj) {
  return `| ${indexObj.no.toString().padStart(2, '0')} | [${indexObj.title}](./${key}) | ${indexObj.modifiedDate} |`
}

l('Creating index entry')

// write to index
const indexContent = await readFile('docs/_index.md', 'utf8')
const lines = indexContent.split('\n')
const INDEX_START = '|:---:|:----:|:-----:|'
const INDEX_END = '> Generated by [save.js](../scripts/save.js)'
const indexStart = lines.findIndex(line => line.includes(INDEX_START)) + 1
const indexEnd = lines.findIndex(line => line.includes(INDEX_END)) - 1
const index = lines.slice(indexStart, indexEnd)
const INDEX_LENGTH = index.length
console.log("before", index)
const indexObjToWrite = {
  no: index.length + 1,
  modifiedDate: new Date().toISOString().split('T')[0],
  title,
}
l('Checking if the index entry already exists')

const regexKey = new RegExp(`\\[${title}\\]`);
const alreadyExists = index.some((line, i) => {
  if (regexKey.test(line)) {
    l(`Updated index entry`)
    indexObjToWrite.no = i + 1
    // update existing entry
    index[i] = renderIndex(indexObjToWrite)
    return true
  }
  return false
}
)
// if not, add new entry
if (!alreadyExists) {
  l(`Added new index entry ${renderIndex(indexObjToWrite)}`);
  index.push(renderIndex(indexObjToWrite))
}
// put index back
lines.splice(indexStart, INDEX_LENGTH, ...index)

l('Writing index')

await writeFile('docs/_index.md', lines.join('\n'), {
  encoding: 'utf8',
  flag: 'w'
})

l(`Saved
  1. Doc: ./docs/${key}
  2. index: ./docs/_index.md
`)